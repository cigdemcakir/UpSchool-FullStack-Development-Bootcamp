@page "/crawler_live_logs"

@inject HttpClient Http
@using Domain.Dtos
@using Microsoft.AspNetCore.SignalR.Client
@using Domain.Services
@using Application.Features.Products.Queries.GetAll
@inject IUrlHelperService UrlHelperService
@inject NavigationManager NavigationManager

<div style="display: flex; height: 100vh;">
    <div style="flex: 1; background-color: #000000; padding: 10px; min-height: 100vh; overflow-y: auto;">
        <h4 class="text-center"style="color: #ffffff;">Crawler Logs</h4>
        <br/>
        <div class="fakeMenu">
            <div class="fakeButtons fakeClose"></div>
            <div class="fakeButtons fakeMinimize"></div>
            <div class="fakeButtons fakeZoom"></div>
        </div>
        <div class="fakeScreen">
            @foreach (var log in logs)
            {
                <p class="line1">@log.Message | @log.SentOn.ToString("g")</p>
            }
        </div>
    </div>
    <div style="flex: 2; background-color: #ffffff; padding: 10px; min-height: 100vh; overflow-y: auto;">
        <h3 class="text-center">Orders</h3>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>OrderId - Products</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var orderLog in orderLogs)
                {
                    <tr class="table-light">
                        <td>
                            <i class="oi oi-envelope-closed text-danger"></i>
                            <strong class="text-danger">@orderLog.Message</strong>
                        </td>
                        <td><strong class="text-danger">@orderLog.SentOn.ToString("g")</strong></td>
                    </tr>
                }
        
                @{
                    var listedProductIds = new HashSet<Guid>();
                }
                
                @foreach (var productLog in productLogs)
                {
                    if (productLog.Id.HasValue && listedProductIds.Contains(productLog.Id.Value))
                    {
                        continue;
                    }
                
                    <tr class="table-light">
                        <td><strong>@productLog.Message</strong></td>
                        <td><strong>@productLog.SentOn.ToString("g")</strong></td>
                    </tr>
                
                    if (productLog.Id.HasValue)
                    {
                        listedProductIds.Add(productLog.Id.Value);
                    }
                }

            </tbody>
        </table>
    </div>
</div>

@code {

    private List<CrawlerLogDto> logs = new List<CrawlerLogDto>();
    private List<CrawlerLogDto> orderLogs = new List<CrawlerLogDto>();
    private List<CrawlerLogDto> productLogs = new List<CrawlerLogDto>();
    List<ProductGetAllDto>? products = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{UrlHelperService.SignalRUrl}/CrawlerHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<CrawlerLogDto>("NewCrawlerLogAdded", (crawlerLogDto) =>
        {
            logs.Add(crawlerLogDto);
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<CrawlerLogDto>("NewOrderAdded", (crawlerLogDto) =>
        {
            orderLogs.Add(crawlerLogDto);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<CrawlerLogDto>("NewProductAdded", (crawlerLogDto) =>
        {
            productLogs.Add(crawlerLogDto);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await FetchProductsAsync();

        await base.OnInitializedAsync();
    }

    private async Task FetchProductsAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7015/api/Products/GetAll?isDeleted=false");

            if (response.IsSuccessStatusCode)
            {
                products = await response.Content.ReadFromJsonAsync<List<ProductGetAllDto>>();
            }
            else
            {
                Console.WriteLine("Veri çekme hatası: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Hata: " + ex.Message);
        }
    }

}
<style>
    body {
        background-color: #272727;
        padding: 9px;
    }

    .fakeButtons {
        height: 10px;
        width: 8px;
        border-radius: 100%;
        border: 1px solid #000;
        position: relative;
        top: 6px;
        left: 6px;
        background-color: #ff3b47;
        border-color: #9d252b;
        display: inline-block;
    }

    .fakeMinimize {
        left: 11px;
        background-color: #ffc100;
        border-color: #9d802c;
    }

    .fakeZoom {
        left: 16px;
        background-color: #00d742;
        border-color: #049931;
    }

    .fakeMenu {
        width: 100%;
        box-sizing: border-box;
        height: 25px;
        margin-top: 2px;
        background-color: #bbb;
        margin: 0 auto;
        border-top-right-radius: 5px;
        border-top-left-radius: 5px;
    }

    .fakeScreen {
        background-color: #151515;
        box-sizing: border-box;
        width: 100%;
        margin: 0 auto;
        padding: 20px;
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }

    p {
        position: relative;
        left: 0;
        width: 90%;
        margin-left: 0;
        text-align: left;
        font-size: 0.70em;
        font-family: monospace;
        white-space: nowrap;
        overflow: hidden;
    }

    span {
        color: #fff;
        font-size: 9px;
    }

    .line1 {
        color: #9CD9F0;
        /* -webkit-animation: type .5s 1s steps(20, end) forwards;
      -moz-animation: type .5s 1s steps(20, end) forwards;
      -o-animation: type .5s 1s steps(20, end) forwards;
      animation: type .5s 1s steps(20, end) forwards;*/
    }

    .cursor1 {
        -webkit-animation: blink 1s 2s 2 forwards;
        -moz-animation: blink 1s 2s 2 forwards;
        -o-animation: blink 1s 2s 2 forwards;
        animation: blink 1s 2s 2 forwards;
    }

    .line2 {
        color: #CDEE69;
        -webkit-animation: type .5s 4.25s steps(20, end) forwards;
        -moz-animation: type .5s 4.25s steps(20, end) forwards;
        -o-animation: type .5s 4.25s steps(20, end) forwards;
        animation: type .5s 4.25s steps(20, end) forwards;
    }

    .cursor2 {
        -webkit-animation: blink 1s 5.25s 2 forwards;
        -moz-animation: blink 1s 5.25s 2 forwards;
        -o-animation: blink 1s 5.25s 2 forwards;
        animation: blink 1s 5.25s 2 forwards;
    }

    .line3 {
        color: #E09690;
        -webkit-animation: type .5s 7.5s steps(20, end) forwards;
        -moz-animation: type .5s 7.5s steps(20, end) forwards;
        -o-animation: type .5s 7.5s steps(20, end) forwards;
        animation: type .5s 7.5s steps(20, end) forwards;
    }

    .cursor3 {
        -webkit-animation: blink 1s 8.5s 2 forwards;
        -moz-animation: blink 1s 8.5s 2 forwards;
        -o-animation: blink 1s 8.5s 2 forwards;
        animation: blink 1s 8.5s 2 forwards;
    }

    .line4 {
        color: #fff;
        -webkit-animation: type .5s 10.75s steps(20, end) forwards;
        -moz-animation: type .5s 10.75s steps(20, end) forwards;
        -o-animation: type .5s 10.75s steps(20, end) forwards;
        animation: type .5s 10.75s steps(20, end) forwards;
    }

    .cursor4 {
        -webkit-animation: blink 1s 11.5s infinite;
        -moz-animation: blink 1s 8.5s infinite;
        -o-animation: blink 1s 8.5s infinite;
        animation: blink 1s 8.5s infinite;
    }

    @@-webkit-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-moz-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-o-keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@keyframes blink {
        0% {
            opacity: 0;
        }

        40% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

    @@-webkit-keyframes type {
        to {
            width: 17em;
        }
    }

    @@-moz-keyframes type {
        to {
            width: 17em;
        }
    }

    @@-o-keyframes type {
        to {
            width: 17em;
        }
    }

    @@keyframes type {
        to {
            width: 17em;
        }
    }
</style>

