@page "/Orders"
@using Application.Features.Products.Queries.GetAll
@using Domain.Dtos
@using Domain.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient HttpClient
@inject IUrlHelperService UrlHelperService

<div class="container">
  <h2 class="text-center">Orders</h2>          
  <table class="table table-hover">
     <thead>
            <tr>
                <th>OrderId - Products</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs)
            {
              <tr class="table-light">
                <td><strong>@log.Message</strong></td>
                <td><strong>@log.SentOn.ToString("g")</strong></td>
                @*<td>
                  <a href="#" onclick="viewProducts('@log')">View Products</a>
                  </td>*@
                @foreach (var productLog in productLogs)
                {
                  <tr class="table-light">
                    <td><strong>@productLog.Message</strong></td>
                    <td><strong>@productLog.SentOn.ToString("g")</strong></td>
                    </tr>
                }
                </tr>
            }
        </tbody>
  </table>
</div>



@code {

  private List<CrawlerLogDto> logs = new List<CrawlerLogDto>();
  
  private List<CrawlerLogDto> productLogs = new List<CrawlerLogDto>();
  
  List<ProductGetAllDto>? products = new();
  
  private HubConnection? hubConnection;
  
  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
      .WithUrl($"{UrlHelperService.SignalRUrl}/CrawlerHub")
      .WithAutomaticReconnect()
      .Build();

    hubConnection.On<CrawlerLogDto>("NewOrderAdded", (crawlerLogDto) =>
    {
      logs.Add(crawlerLogDto);
        
      InvokeAsync(StateHasChanged);
    });
    
    hubConnection.On<CrawlerLogDto>("NewProductAdded", (crawlerLogDto) =>
    {
      productLogs.Add(crawlerLogDto);
        
      InvokeAsync(StateHasChanged);
    });

    await hubConnection.StartAsync();
  
    await FetchProductsAsync();

    await base.OnInitializedAsync();
  }

  private async Task FetchProductsAsync()
  {
    try
    {
      var response = await HttpClient.GetAsync("https://localhost:7015/api/Products/GetAll?isDeleted=false");

      if (response.IsSuccessStatusCode)
      {
        products = await response.Content.ReadFromJsonAsync<List<ProductGetAllDto>>();
      }
      else
      {
        Console.WriteLine("Veri çekme hatası: " + response.StatusCode);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine("Hata: " + ex.Message);
    }
  }

}